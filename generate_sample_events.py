#!/usr/bin/env python3
"""
Quick Sample Event Generator for Grafana Dashboard
Run this script to generate specific types of security events for testing
"""

import json
import time
import random
from datetime import datetime
from log_config import setup_logging, log_metric, log_event

# Initialize logger
logger = setup_logging(log_dir="logs", log_level=20)

def generate_phishing_detection():
    """Generate a phishing detection event"""
    domains = [
        "fake-paypal.net", 
        "phishing-amazon.org",
        "malicious-google.co",
        "evil-microsoft.net",
        "scam-ebay.com"
    ]
    
    domain = random.choice(domains)
    confidence = random.uniform(0.85, 0.99)
    
    log_event(logger, "ml_phishing_detected", {
        "url": f"https://{domain}/login",
        "domain": domain,
        "confidence": confidence,
        "detection_method": "machine_learning",
        "client_id": f"client_{random.randint(1000, 9999)}",
        "prediction_time": random.uniform(0.05, 0.3)
    })
    print(f"🚨 Generated phishing detection: {domain} (confidence: {confidence:.2f})")

def generate_safe_requests(count=5):
    """Generate multiple safe request events"""
    safe_domains = ["google.com", "microsoft.com", "github.com", "stackoverflow.com"]
    
    for _ in range(count):
        domain = random.choice(safe_domains)
        
        log_metric(logger, "request", 1, {
            "host": domain,
            "client_id": f"client_{random.randint(1000, 9999)}",
            "path_type": "standard"
        })
        
        analysis_time = random.uniform(50, 200)
        log_metric(logger, "analysis_time_ms", analysis_time, {
            "url": f"https://{domain}",
            "host": domain,
            "is_slow": analysis_time > 150
        })
    
    print(f"✅ Generated {count} safe requests")

def generate_web_scan():
    """Generate a web interface scan event"""
    test_urls = [
        "https://example.com",
        "https://test-phishing.fake",
        "https://suspicious-login.net"
    ]
    
    url = random.choice(test_urls)
    is_phishing = "phishing" in url or "suspicious" in url
    
    log_event(logger, "web_scan_request", {
        "url": url,
        "source": "web_interface",
        "user_agent": "Mozilla/5.0 (Test Browser)"
    })
    
    if is_phishing:
        log_event(logger, "web_phishing_detected", {
            "url": url,
            "confidence": random.uniform(0.85, 0.98),
            "detection_method": "machine_learning",
            "source": "web_interface",
            "scan_time": random.uniform(0.5, 2.0)
        })
        print(f"🔍 Generated web scan with phishing detection: {url}")
    else:
        print(f"🔍 Generated safe web scan: {url}")

def generate_bypass_event():
    """Generate a security bypass event"""
    domains = ["questionable-site.com", "flagged-domain.net"]
    domain = random.choice(domains)
    
    log_event(logger, "bypass_granted", {
        "client_id": f"client_{random.randint(1000, 9999)}",
        "domain": domain,
        "reason": "user_override"
    })
    print(f"🔓 Generated bypass event for: {domain}")

def main():
    """Interactive event generator"""
    print("🛡️ Smart Proxy - Sample Event Generator")
    print("=" * 50)
    print("Choose what type of events to generate:")
    print("1. 🚨 Phishing Detection")
    print("2. ✅ Safe Requests (5x)")
    print("3. 🔍 Web Interface Scan")
    print("4. 🔓 Security Bypass")
    print("5. 🎲 Mixed Events (10x)")
    print("6. 🔄 Continuous Generation (30 seconds)")
    print("0. Exit")
    
    while True:
        try:
            choice = input("\nEnter your choice (0-6): ").strip()
            
            if choice == "0":
                print("👋 Goodbye!")
                break
            elif choice == "1":
                generate_phishing_detection()
            elif choice == "2":
                generate_safe_requests(5)
            elif choice == "3":
                generate_web_scan()
            elif choice == "4":
                generate_bypass_event()
            elif choice == "5":
                print("🎲 Generating mixed events...")
                for _ in range(10):
                    event_type = random.choice(['safe', 'phishing', 'scan', 'bypass'])
                    if event_type == 'safe':
                        generate_safe_requests(1)
                    elif event_type == 'phishing':
                        generate_phishing_detection()
                    elif event_type == 'scan':
                        generate_web_scan()
                    elif event_type == 'bypass':
                        generate_bypass_event()
                    time.sleep(0.5)
                print("✅ Generated 10 mixed events")
            elif choice == "6":
                print("🔄 Generating continuous events for 30 seconds...")
                start_time = time.time()
                event_count = 0
                while time.time() - start_time < 30:
                    event_type = random.choices(
                        ['safe', 'phishing', 'scan', 'bypass'],
                        weights=[70, 10, 15, 5],
                        k=1
                    )[0]
                    
                    if event_type == 'safe':
                        generate_safe_requests(1)
                    elif event_type == 'phishing':
                        generate_phishing_detection()
                    elif event_type == 'scan':
                        generate_web_scan()
                    elif event_type == 'bypass':
                        generate_bypass_event()
                    
                    event_count += 1
                    time.sleep(random.uniform(0.5, 2.0))
                
                print(f"✅ Generated {event_count} events in 30 seconds")
            else:
                print("❌ Invalid choice. Please enter 0-6.")
                
        except KeyboardInterrupt:
            print("\n👋 Interrupted by user. Goodbye!")
            break
        except Exception as e:
            print(f"❌ Error: {e}")

if __name__ == "__main__":
    main()
